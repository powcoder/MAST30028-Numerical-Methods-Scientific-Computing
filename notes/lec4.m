%% Basic plotting
% 
% 
% You will be expected to use plots to explain relevant results in 
% your assignment and lab exam. 

%% Function plotting
% Although we won't use these a lot, there are plot commands designed
% primarily for plotting functions
help fplot

% fplot is the simplest 
fplot(@(x) x.^2-2*x+1, [-1, 1])

%%
%  can be used to plot several functions at once 
% by putting them into a vector input.
fplot(@(x) [tan(x),sin(x),cos(x)], 2*pi*[-1 1 ])

%%
% or implicit functions
fimplicit(@(x,y)  x.^2 + y.^2 - 1)

%%
% or parametrically defined functions
fplot(@cos,@sin)

%% Data plotting
% We will mainly be plotting data generated by numerical algorithms. 
% MATLAB plotting usually requires a list of points to plot.  This is 
% different to Mathematica, or a TI calculator, and might take a while
% to get used to.  The basic plotting syntax is simple
clc;
X = linspace(0,2*pi,100);
Y = sin(X);
Z = cos(X);
plot(X,Y, X, Z)

%%
% we can control colors, and markers (see "help plot" for all possible
% options)

plot(X,Y,'r-')  % the "r" is for red, and the "-" tells MATLAB to draw a 
                % solid line
                
%% 
% A few basic plotting tools:
%   if we plot something new, the old plot will be destroyed, unless we
%   type |hold on| AFTER the first plot.
hold on
plot(X,Y+.3,'go');  % the "g" is for green, the "o" tells MATLAB to draw
                    % little circles
                    
%%
% We can put several plots in the same figure, using |subplot|
clf;        % clears the figure
subplot(1,2,1); plot(X,Y,'r-'); title('SUBPLOT 1');
subplot(1,2,2); plot(X,Y+.3,'go'); title('SUBPLOT 2');
% you can change axis limits and such.  For example, to make the x and y
% axis have the same spacing (useful for pictures), use:
axis square     % this ONLY affects the second subplot
xlabel(' x ');      % same would work for "y" too, of course
subplot(1,2,1);     % go back to the first plot
ylim( [-.5,.5] );

%%
% You can open several figures.  Use the |figure| command.  If you have a
% figure window that says "Figure 1", then the command |figure(1)| will
% make all the actions of any plotting go to that figure window.  You can
% switch back and forth at will.
%
% Everything goes to the current figure window. |gcf| tells you which figure
% that is. 

%% 3D plotting
% for 3D plotting, use |plot3|.  There are also many other 3D plotting
% tools (for contour plots, etc.).  You can get a list of them by typing
% "help graph3d".  Similarly, "help graph2d" gives normal 2D plots.  There
% are some special plotting functions (like a histogram, or a pie chart) that you
% can find in the listing "help specgraph".    For images, "image" and
% "imagesc" are useful.

%% Special plots
% plot uses linear scales in x and y directions
% for some kinds of data (that can get very big or small) 
% it is better to use log scales on the x or y axis (or both)\%
% for that use 
%       |semilogx| or |semilogy| or |loglog| 

help semilogx

%% An example
n = 1:10; data = 0.2.^n;
figure(1);
subplot(2,2,1);
plot(n,data); title('using plot');
subplot(2,2,2);
semilogx(n,data); title('using semilogx');
subplot(2,2,3);
semilogy(n,data); title('using semilogy');
subplot(2,2,4);
loglog(n,data); title('using loglog');

%% Another example
n = 1:10; data = n.^-4;
figure(2);
subplot(2,2,1);
plot(n,data); title('using plot');
subplot(2,2,2);
semilogx(n,data); title('using semilogx');
subplot(2,2,3);
semilogy(n,data); title('using semilogy');
subplot(2,2,4);
loglog(n,data); title('using loglog');

%% Parametric plots
% We often want to create parametric plots of x(t) vs y(t).
% Then we create a vector of t values, corresponding x y vector 
% then just plot x vs y 
figure(3);
t = linspace(0,2*pi);
x = sin(t+pi/2);
y = sin(3*t);
plot(x,y);
title ('Your ABC');

% Now do Exercise Set 4 of Week 2.


 